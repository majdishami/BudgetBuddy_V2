{
  "version": 3,
  "sources": ["../../../../shared/schema.ts"],
  "sourcesContent": ["import { pgTable, serial, varchar, decimal, date } from 'drizzle-orm/pg-core';\nimport { z } from 'zod';\n\n// ======================\n// Frequency Types\n// ======================\nexport const FrequencyType = z.enum([\n  'DAILY',\n  'WEEKLY',\n  'BIWEEKLY',\n  'MONTHLY',\n  'QUARTERLY',\n  'YEARLY',\n  'ONE_TIME'\n]);\nexport type Frequency = z.infer<typeof FrequencyType>;\n\n// ======================\n// Database Tables\n// ======================\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  color: varchar(\"color\", { length: 7 }).notNull(),\n  icon: varchar(\"icon\", { length: 50 }).notNull(),\n  createdAt: date(\"created_at\").defaultNow(),\n  updatedAt: date(\"updated_at\").defaultNow()\n});\n\nexport const expenses = pgTable(\"expenses\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  date: date(\"date\").notNull(),\n  frequency: varchar(\"frequency\", { length: 20 }).notNull(),\n  categoryId: serial(\"category_id\").references(() => categories.id).notNull(),\n  createdAt: date(\"created_at\").defaultNow(),\n  updatedAt: date(\"updated_at\").defaultNow()\n});\n\nexport const incomes = pgTable(\"incomes\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  date: date(\"date\").notNull(),\n  frequency: varchar(\"frequency\", { length: 20 }).notNull(),\n  source: varchar(\"source\", { length: 50 }),\n  createdAt: date(\"created_at\").defaultNow(),\n  updatedAt: date(\"updated_at\").defaultNow()\n});\n\n// ======================\n// Base Types\n// ======================\nexport type Category = typeof categories.$inferSelect;\nexport type Expense = typeof expenses.$inferSelect;\nexport type Income = typeof incomes.$inferSelect;\n\n// ======================\n// Frontend Types (with string dates)\n// ======================\nexport interface FrontendCategory extends Omit<Category, 'createdAt'|'updatedAt'> {\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface FrontendExpense extends Omit<Expense, 'date'|'createdAt'|'updatedAt'> {\n  date: string;\n  createdAt: string;\n  updatedAt: string;\n  category?: FrontendCategory;\n}\n\nexport interface FrontendIncome extends Omit<Income, 'date'|'createdAt'|'updatedAt'> {\n  date: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// ======================\n// Report Types\n// ======================\nexport interface ProcessedExpense extends FrontendExpense {\n  dates: { date: string; isPending: boolean; amount: number }[];\n  incurredAmount: number;\n  pendingAmount: number;\n  totalAmount: number;\n}\n\nexport interface ProcessedIncome extends FrontendIncome {\n  dates: { date: string; isPending: boolean; amount: number }[];\n  incurredAmount: number;\n  pendingAmount: number;\n  totalAmount: number;\n}\n\n// ======================\n// Validation Schemas\n// ======================\nexport const insertCategorySchema = z.object({\n  name: z.string(),\n  color: z.string(),\n  icon: z.string()\n});\n\nexport const insertExpenseSchema = z.object({\n  name: z.string(),\n  amount: z.string(),\n  date: z.date(),\n  frequency: z.string(),\n  categoryId: z.number()\n});\n\nexport const insertIncomeSchema = z.object({\n  name: z.string(),\n  amount: z.string(),\n  date: z.date(),\n  frequency: z.string(),\n  source: z.string().optional()\n});"],
  "mappings": ";;;;;;;;;;;;;AAMO,IAAM,gBAAgB,EAAE,KAAK;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAMM,IAAM,aAAa,QAAQ,cAAc;AAAA,EAC9C,IAAI,OAAO,IAAI,EAAE,WAAW;AAAA,EAC5B,MAAM,QAAQ,QAAQ,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ;AAAA,EAC/C,OAAO,QAAQ,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ;AAAA,EAC/C,MAAM,QAAQ,QAAQ,EAAE,QAAQ,GAAG,CAAC,EAAE,QAAQ;AAAA,EAC9C,WAAW,KAAK,YAAY,EAAE,WAAW;AAAA,EACzC,WAAW,KAAK,YAAY,EAAE,WAAW;AAC3C,CAAC;AAEM,IAAM,WAAW,QAAQ,YAAY;AAAA,EAC1C,IAAI,OAAO,IAAI,EAAE,WAAW;AAAA,EAC5B,MAAM,QAAQ,QAAQ,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ;AAAA,EAC/C,QAAQ,QAAQ,UAAU,EAAE,WAAW,IAAI,OAAO,EAAE,CAAC,EAAE,QAAQ;AAAA,EAC/D,MAAM,KAAK,MAAM,EAAE,QAAQ;AAAA,EAC3B,WAAW,QAAQ,aAAa,EAAE,QAAQ,GAAG,CAAC,EAAE,QAAQ;AAAA,EACxD,YAAY,OAAO,aAAa,EAAE,WAAW,MAAM,WAAW,EAAE,EAAE,QAAQ;AAAA,EAC1E,WAAW,KAAK,YAAY,EAAE,WAAW;AAAA,EACzC,WAAW,KAAK,YAAY,EAAE,WAAW;AAC3C,CAAC;AAEM,IAAM,UAAU,QAAQ,WAAW;AAAA,EACxC,IAAI,OAAO,IAAI,EAAE,WAAW;AAAA,EAC5B,MAAM,QAAQ,QAAQ,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ;AAAA,EAC/C,QAAQ,QAAQ,UAAU,EAAE,WAAW,IAAI,OAAO,EAAE,CAAC,EAAE,QAAQ;AAAA,EAC/D,MAAM,KAAK,MAAM,EAAE,QAAQ;AAAA,EAC3B,WAAW,QAAQ,aAAa,EAAE,QAAQ,GAAG,CAAC,EAAE,QAAQ;AAAA,EACxD,QAAQ,QAAQ,UAAU,EAAE,QAAQ,GAAG,CAAC;AAAA,EACxC,WAAW,KAAK,YAAY,EAAE,WAAW;AAAA,EACzC,WAAW,KAAK,YAAY,EAAE,WAAW;AAC3C,CAAC;AAkDM,IAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,MAAM,EAAE,OAAO;AAAA,EACf,OAAO,EAAE,OAAO;AAAA,EAChB,MAAM,EAAE,OAAO;AACjB,CAAC;AAEM,IAAM,sBAAsB,EAAE,OAAO;AAAA,EAC1C,MAAM,EAAE,OAAO;AAAA,EACf,QAAQ,EAAE,OAAO;AAAA,EACjB,MAAM,EAAE,KAAK;AAAA,EACb,WAAW,EAAE,OAAO;AAAA,EACpB,YAAY,EAAE,OAAO;AACvB,CAAC;AAEM,IAAM,qBAAqB,EAAE,OAAO;AAAA,EACzC,MAAM,EAAE,OAAO;AAAA,EACf,QAAQ,EAAE,OAAO;AAAA,EACjB,MAAM,EAAE,KAAK;AAAA,EACb,WAAW,EAAE,OAAO;AAAA,EACpB,QAAQ,EAAE,OAAO,EAAE,SAAS;AAC9B,CAAC;",
  "names": []
}
